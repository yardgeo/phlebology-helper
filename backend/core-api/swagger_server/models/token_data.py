# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TokenData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, access_expires_in: int=None, email: str=None, first_name: str=None, family_name: str=None, role: str=None):  # noqa: E501
        """TokenData - a model defined in Swagger

        :param token: The token of this TokenData.  # noqa: E501
        :type token: str
        :param access_expires_in: The access_expires_in of this TokenData.  # noqa: E501
        :type access_expires_in: int
        :param email: The email of this TokenData.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this TokenData.  # noqa: E501
        :type first_name: str
        :param family_name: The family_name of this TokenData.  # noqa: E501
        :type family_name: str
        :param role: The role of this TokenData.  # noqa: E501
        :type role: str
        """
        self.swagger_types = {
            'token': str,
            'access_expires_in': int,
            'email': str,
            'first_name': str,
            'family_name': str,
            'role': str
        }

        self.attribute_map = {
            'token': 'token',
            'access_expires_in': 'accessExpiresIn',
            'email': 'email',
            'first_name': 'first_name',
            'family_name': 'family_name',
            'role': 'role'
        }

        self._token = token
        self._access_expires_in = access_expires_in
        self._email = email
        self._first_name = first_name
        self._family_name = family_name
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'TokenData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TokenData of this TokenData.  # noqa: E501
        :rtype: TokenData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self) -> str:
        """Gets the token of this TokenData.


        :return: The token of this TokenData.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this TokenData.


        :param token: The token of this TokenData.
        :type token: str
        """

        self._token = token

    @property
    def access_expires_in(self) -> int:
        """Gets the access_expires_in of this TokenData.


        :return: The access_expires_in of this TokenData.
        :rtype: int
        """
        return self._access_expires_in

    @access_expires_in.setter
    def access_expires_in(self, access_expires_in: int):
        """Sets the access_expires_in of this TokenData.


        :param access_expires_in: The access_expires_in of this TokenData.
        :type access_expires_in: int
        """

        self._access_expires_in = access_expires_in

    @property
    def email(self) -> str:
        """Gets the email of this TokenData.


        :return: The email of this TokenData.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this TokenData.


        :param email: The email of this TokenData.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self) -> str:
        """Gets the first_name of this TokenData.


        :return: The first_name of this TokenData.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this TokenData.


        :param first_name: The first_name of this TokenData.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def family_name(self) -> str:
        """Gets the family_name of this TokenData.


        :return: The family_name of this TokenData.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name: str):
        """Sets the family_name of this TokenData.


        :param family_name: The family_name of this TokenData.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def role(self) -> str:
        """Gets the role of this TokenData.


        :return: The role of this TokenData.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this TokenData.


        :param role: The role of this TokenData.
        :type role: str
        """

        self._role = role
