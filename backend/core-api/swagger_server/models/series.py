# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.instance import Instance
from swagger_server import util


class Series(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, orientation: str=None, has_state: bool=None, instances: List[Instance]=None):  # noqa: E501
        """Series - a model defined in Swagger

        :param id: The id of this Series.  # noqa: E501
        :type id: str
        :param orientation: The orientation of this Series.  # noqa: E501
        :type orientation: str
        :param has_state: The has_state of this Series.  # noqa: E501
        :type has_state: bool
        :param instances: The instances of this Series.  # noqa: E501
        :type instances: List[Instance]
        """
        self.swagger_types = {
            'id': str,
            'orientation': str,
            'has_state': bool,
            'instances': List[Instance]
        }

        self.attribute_map = {
            'id': 'id',
            'orientation': 'orientation',
            'has_state': 'hasState',
            'instances': 'instances'
        }

        self._id = id
        self._orientation = orientation
        self._has_state = has_state
        self._instances = instances

    @classmethod
    def from_dict(cls, dikt) -> 'Series':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Series of this Series.  # noqa: E501
        :rtype: Series
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Series.


        :return: The id of this Series.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Series.


        :param id: The id of this Series.
        :type id: str
        """

        self._id = id

    @property
    def orientation(self) -> str:
        """Gets the orientation of this Series.


        :return: The orientation of this Series.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation: str):
        """Sets the orientation of this Series.


        :param orientation: The orientation of this Series.
        :type orientation: str
        """

        self._orientation = orientation

    @property
    def has_state(self) -> bool:
        """Gets the has_state of this Series.


        :return: The has_state of this Series.
        :rtype: bool
        """
        return self._has_state

    @has_state.setter
    def has_state(self, has_state: bool):
        """Sets the has_state of this Series.


        :param has_state: The has_state of this Series.
        :type has_state: bool
        """

        self._has_state = has_state

    @property
    def instances(self) -> List[Instance]:
        """Gets the instances of this Series.


        :return: The instances of this Series.
        :rtype: List[Instance]
        """
        return self._instances

    @instances.setter
    def instances(self, instances: List[Instance]):
        """Sets the instances of this Series.


        :param instances: The instances of this Series.
        :type instances: List[Instance]
        """

        self._instances = instances
